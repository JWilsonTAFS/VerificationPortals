<Activity mc:Ignorable="sap sap2010" x:Class="NameCrossReference" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:rr="clr-namespace:Remora.Results;assembly=Remora.Results" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ss="clr-namespace:System.Security;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:usa="clr-namespace:UiPath.Salesforce.Activities;assembly=UiPath.Salesforce.Activities" xmlns:usam="clr-namespace:UiPath.Salesforce.Activities.Models;assembly=UiPath.Salesforce.Activities" xmlns:usc="clr-namespace:UiPath.Salesforce.ConnectionService;assembly=UiPath.Salesforce" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="ClientName" Type="InArgument(x:String)" />
    <x:Property Name="ClientNumber" Type="InArgument(x:String)" />
    <x:Property Name="Result" Type="OutArgument(rr:Result(scg:Queue(x:String)))" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>1210,1637</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>Remora.Results</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Salesforce.ConnectionService</x:String>
      <x:String>UiPath.Salesforce.Models</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>UiPath.Salesforce.Telemetry</x:String>
      <x:String>UiPath.Salesforce.Activities</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Salesforce.Activities.Models</x:String>
      <x:String>Tafs.Applications.Salesforce</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.HashCode</AssemblyReference>
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>Remora.Results</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xml.ReaderWriter</AssemblyReference>
      <AssemblyReference>Tafs.Applications.Salesforce</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Salesforce</AssemblyReference>
      <AssemblyReference>UiPath.Salesforce.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="NameCrossReference" sap:VirtualizedContainerService.HintSize="685,1572" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="retryCount" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign sap:VirtualizedContainerService.HintSize="643,60" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">
          <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_1">retryCount</CSharpReference>
        </OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <ui:InterruptibleDoWhile CurrentIndex="{x:Null}" DisplayName="Do While" sap:VirtualizedContainerService.HintSize="643,1380" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_1">
      <ui:InterruptibleDoWhile.Body>
        <TryCatch sap:VirtualizedContainerService.HintSize="607,1215" sap2010:WorkflowViewState.IdRef="TryCatch_1">
          <TryCatch.Try>
            <Sequence sap:VirtualizedContainerService.HintSize="569,988" sap2010:WorkflowViewState.IdRef="Sequence_2">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="salesforceUsername" />
                <Variable x:TypeArguments="ss:SecureString" Name="salesforcePassword" />
                <Variable x:TypeArguments="ss:SecureString" Name="salesforceToken" />
                <Variable x:TypeArguments="x:String" Name="consumerKey" />
                <Variable x:TypeArguments="ss:SecureString" Name="consumerSecret" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence DisplayName="Get Credentials" sap:VirtualizedContainerService.HintSize="527,66" sap2010:WorkflowViewState.IdRef="Sequence_3">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:GetRobotCredential TimeoutMS="{x:Null}" AssetName="tafsSalesforceCredential" CacheStrategy="None" DisplayName="Get Credential" sap:VirtualizedContainerService.HintSize="334,180" sap2010:WorkflowViewState.IdRef="GetRobotCredential_1">
                  <ui:GetRobotCredential.Password>
                    <OutArgument x:TypeArguments="ss:SecureString">
                      <CSharpReference x:TypeArguments="ss:SecureString" sap2010:WorkflowViewState.IdRef="CSharpReference`1_3">salesforcePassword</CSharpReference>
                    </OutArgument>
                  </ui:GetRobotCredential.Password>
                  <ui:GetRobotCredential.Username>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_2">salesforceUsername</CSharpReference>
                    </OutArgument>
                  </ui:GetRobotCredential.Username>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:GetRobotCredential>
                <ui:GetRobotCredential TimeoutMS="{x:Null}" Username="{x:Null}" AssetName="tafsSalesforceToken" CacheStrategy="None" DisplayName="Get Credential" sap:VirtualizedContainerService.HintSize="334,180" sap2010:WorkflowViewState.IdRef="GetRobotCredential_2">
                  <ui:GetRobotCredential.Password>
                    <OutArgument x:TypeArguments="ss:SecureString">
                      <CSharpReference x:TypeArguments="ss:SecureString" sap2010:WorkflowViewState.IdRef="CSharpReference`1_4">salesforceToken</CSharpReference>
                    </OutArgument>
                  </ui:GetRobotCredential.Password>
                </ui:GetRobotCredential>
                <ui:GetRobotCredential TimeoutMS="{x:Null}" AssetName="tafsSalesforceApplicationCredential" CacheStrategy="None" DisplayName="Get Credential" sap:VirtualizedContainerService.HintSize="334,180" sap2010:WorkflowViewState.IdRef="GetRobotCredential_3">
                  <ui:GetRobotCredential.Password>
                    <OutArgument x:TypeArguments="ss:SecureString">
                      <CSharpReference x:TypeArguments="ss:SecureString" sap2010:WorkflowViewState.IdRef="CSharpReference`1_6">consumerSecret</CSharpReference>
                    </OutArgument>
                  </ui:GetRobotCredential.Password>
                  <ui:GetRobotCredential.Username>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_5">consumerKey</CSharpReference>
                    </OutArgument>
                  </ui:GetRobotCredential.Username>
                </ui:GetRobotCredential>
              </Sequence>
              <usa:SalesforceApplicationScope CustomServer="{x:Null}" DesignSalesforceConnectionInfo="{x:Null}" ExistingConnectionService="{x:Null}" Port="{x:Null}" ProxyPassword="{x:Null}" ProxyServer="{x:Null}" ProxyUser="{x:Null}" SalesforceConnection="{x:Null}" Sforce_Auto_Assign="{x:Null}" DisplayName="Salesforce Application Scope" sap:VirtualizedContainerService.HintSize="527,790" sap2010:WorkflowViewState.IdRef="SalesforceApplicationScope_1" ReportApiErrorAsException="False" ServerType="Live" TelemetryEnabled="False" UseStrongDataTyping="False">
                <usa:SalesforceApplicationScope.Body>
                  <ActivityAction x:TypeArguments="usc:IConnectionService">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="usc:IConnectionService" Name="SalesforceConnection" />
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="493,679" sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="sd:DataTable" Name="searchResults" />
                        <Variable x:TypeArguments="usam:SalesforceStatus" Name="salesforceStatus" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <usa:ExecuteSoql DisplayName="Execute SOQL" sap:VirtualizedContainerService.HintSize="451,22" sap2010:WorkflowViewState.IdRef="ExecuteSoql_1">
                        <usa:ExecuteSoql.Result>
                          <OutArgument x:TypeArguments="sd:DataTable">
                            <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_7">searchResults</CSharpReference>
                          </OutArgument>
                        </usa:ExecuteSoql.Result>
                        <usa:ExecuteSoql.SalesforceStatus>
                          <OutArgument x:TypeArguments="usam:SalesforceStatus">
                            <CSharpReference x:TypeArguments="usam:SalesforceStatus" sap2010:WorkflowViewState.IdRef="CSharpReference`1_8">salesforceStatus</CSharpReference>
                          </OutArgument>
                        </usa:ExecuteSoql.SalesforceStatus>
                        <usa:ExecuteSoql.SoqlCommand>
                          <InArgument x:TypeArguments="x:String">
                            <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_7" xml:space="preserve">"Select Name From Debtor_Portal_Client_Name_Reference__c Where Name = '" + ClientName.Replace("'", "\'") + "'  And Client_Number__c = '" + ClientNumber + "'"</CSharpValue>
                          </InArgument>
                        </usa:ExecuteSoql.SoqlCommand>
                      </usa:ExecuteSoql>
                      <ui:IfElseIf DisplayName="Else If" sap:VirtualizedContainerService.HintSize="451,525" sap2010:WorkflowViewState.IdRef="IfElseIf_1">
                        <ui:IfElseIf.ConditionBlocks>
                          <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
                            <ui:IfElseIfBlock BlockType="If">
                              <ui:IfElseIfBlock.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_8">salesforceStatus.Success &amp;&amp; searchResults.Rows.Count &gt;= 1</CSharpValue>
                                </InArgument>
                              </ui:IfElseIfBlock.Condition>
                              <ui:IfElseIfBlock.Then>
                                <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                                      <CSharpReference x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">Result</CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                                      <CSharpValue x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">Result&lt;Queue&lt;string&gt;&gt;.FromSuccess(new Queue&lt;string&gt;(searchResults.AsEnumerable().Select(row =&gt; row.Field&lt;string&gt;(0))))</CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </ui:IfElseIfBlock.Then>
                            </ui:IfElseIfBlock>
                            <ui:IfElseIfBlock BlockType="ElseIf">
                              <ui:IfElseIfBlock.Condition>
                                <InArgument x:TypeArguments="x:Boolean">
                                  <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_10">salesforceStatus.Success &amp;&amp; searchResults.Rows.Count == 0</CSharpValue>
                                </InArgument>
                              </ui:IfElseIfBlock.Condition>
                              <ui:IfElseIfBlock.Then>
                                <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                                      <CSharpReference x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpReference`1_15">Result</CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                                      <CSharpValue x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">new Queue&lt;string&gt;()</CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </ui:IfElseIfBlock.Then>
                            </ui:IfElseIfBlock>
                            <ui:IfElseIfBlock BlockType="Else">
                              <ui:IfElseIfBlock.Then>
                                <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                                      <CSharpReference x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpReference`1_16">Result</CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                                      <CSharpValue x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18">Result&lt;Queue&lt;string&gt;&gt;.FromError(new SalesforceError(salesforceStatus))</CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                              </ui:IfElseIfBlock.Then>
                            </ui:IfElseIfBlock>
                          </sc:BindingList>
                        </ui:IfElseIf.ConditionBlocks>
                      </ui:IfElseIf>
                    </Sequence>
                  </ActivityAction>
                </usa:SalesforceApplicationScope.Body>
                <usa:SalesforceApplicationScope.ConsumerKey>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_2">consumerKey</CSharpValue>
                  </InArgument>
                </usa:SalesforceApplicationScope.ConsumerKey>
                <usa:SalesforceApplicationScope.ConsumerSecret>
                  <InArgument x:TypeArguments="ss:SecureString">
                    <CSharpValue x:TypeArguments="ss:SecureString" sap2010:WorkflowViewState.IdRef="CSharpValue`1_3">consumerSecret</CSharpValue>
                  </InArgument>
                </usa:SalesforceApplicationScope.ConsumerSecret>
                <usa:SalesforceApplicationScope.Password>
                  <InArgument x:TypeArguments="ss:SecureString">
                    <CSharpValue x:TypeArguments="ss:SecureString" sap2010:WorkflowViewState.IdRef="CSharpValue`1_5">salesforcePassword</CSharpValue>
                  </InArgument>
                </usa:SalesforceApplicationScope.Password>
                <usa:SalesforceApplicationScope.SecurityToken>
                  <InArgument x:TypeArguments="ss:SecureString">
                    <CSharpValue x:TypeArguments="ss:SecureString" sap2010:WorkflowViewState.IdRef="CSharpValue`1_6">salesforceToken</CSharpValue>
                  </InArgument>
                </usa:SalesforceApplicationScope.SecurityToken>
                <usa:SalesforceApplicationScope.Username>
                  <InArgument x:TypeArguments="x:String">
                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_4">salesforceUsername</CSharpValue>
                  </InArgument>
                </usa:SalesforceApplicationScope.Username>
              </usa:SalesforceApplicationScope>
            </Sequence>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="573,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                </ActivityAction.Argument>
                <Sequence sap:VirtualizedContainerService.HintSize="376,283" sap2010:WorkflowViewState.IdRef="Sequence_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Error">
                    <ui:LogMessage.Message>
                      <InArgument x:TypeArguments="x:Object">
                        <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">"An error occurred during name cross-reference lookup: " + exception.ToString()</CSharpValue>
                      </InArgument>
                    </ui:LogMessage.Message>
                  </ui:LogMessage>
                  <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                    <Assign.To>
                      <OutArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                        <CSharpReference x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">Result</CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="rr:Result(scg:Queue(x:String))">
                        <CSharpValue x:TypeArguments="rr:Result(scg:Queue(x:String))" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">exception</CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
          <TryCatch.Finally>
            <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_6">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">
                  <CSharpReference x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">retryCount</CSharpReference>
                </OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">
                  <CSharpValue x:TypeArguments="x:Int32" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">retryCount + 1</CSharpValue>
                </InArgument>
              </Assign.Value>
            </Assign>
          </TryCatch.Finally>
        </TryCatch>
      </ui:InterruptibleDoWhile.Body>
      <ui:InterruptibleDoWhile.Condition>
        <CSharpValue x:TypeArguments="x:Boolean" sap2010:WorkflowViewState.IdRef="CSharpValue`1_1">!Result.IsSuccess &amp;&amp; retryCount &gt; 3</CSharpValue>
      </ui:InterruptibleDoWhile.Condition>
    </ui:InterruptibleDoWhile>
  </Sequence>
</Activity>